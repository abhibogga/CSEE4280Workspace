$date
	Tue Jan 21 16:45:55 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module tb_fourFullAdder $end
$var wire 16 ! sumFinal [15:0] $end
$var wire 4 " cOutFinal [3:0] $end
$var reg 1 # Clk $end
$var reg 16 $ a [15:0] $end
$var reg 16 % b [15:0] $end
$var reg 1 & cIn $end
$scope module fa $end
$var wire 16 ' a [15:0] $end
$var wire 16 ( b [15:0] $end
$var wire 1 & cIn $end
$var wire 16 ) sum [15:0] $end
$var wire 4 * cOut [3:0] $end
$var reg 4 + cOutFinal [3:0] $end
$var reg 16 , sumFinal [15:0] $end
$scope module eightToEleven $end
$var wire 4 - a [3:0] $end
$var wire 4 . b [3:0] $end
$var wire 1 / cIn $end
$var reg 1 0 cOut $end
$var reg 4 1 sum [3:0] $end
$var reg 5 2 tempOutput [4:0] $end
$upscope $end
$scope module fourToSeven $end
$var wire 4 3 a [3:0] $end
$var wire 4 4 b [3:0] $end
$var wire 1 5 cIn $end
$var reg 1 6 cOut $end
$var reg 4 7 sum [3:0] $end
$var reg 5 8 tempOutput [4:0] $end
$upscope $end
$scope module twelveToFifteen $end
$var wire 4 9 a [3:0] $end
$var wire 4 : b [3:0] $end
$var wire 1 ; cIn $end
$var reg 1 < cOut $end
$var reg 4 = sum [3:0] $end
$var reg 5 > tempOutput [4:0] $end
$upscope $end
$scope module zeroToThree $end
$var wire 4 ? a [3:0] $end
$var wire 4 @ b [3:0] $end
$var wire 1 & cIn $end
$var reg 1 A cOut $end
$var reg 4 B sum [3:0] $end
$var reg 5 C tempOutput [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
b0 =
0<
0;
b0 :
b0 9
b0 8
b0 7
06
05
b0 4
b0 3
b0 2
b0 1
00
0/
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
0&
b0 %
b0 $
0#
b0 "
b0 !
$end
#1
15
1/
1;
b1111111111111110 !
b1111111111111110 ,
b1111 "
b1111 +
1A
b1110 B
b11110 C
16
b1111 7
b11111 8
10
b1111 1
b11111 2
b1111 *
1<
b1111111111111110 )
b1111 =
b11111 >
b1111 @
b1111 4
b1111 .
b1111 :
b1111 ?
b1111 3
b1111 -
b1111 9
b1111111111111111 %
b1111111111111111 (
b1111111111111111 $
b1111111111111111 '
1#
#2
0#
#3
b1111111111111111 !
b1111111111111111 ,
b1111111111111111 )
b1111 B
b11111 C
1&
1#
#4
0#
#5
b0 !
b0 ,
b0 B
b10000 C
b0 7
b10000 8
b0 1
b10000 2
b0 )
b0 =
b10000 >
b101 @
b101 4
b101 .
b101 :
b1010 ?
b1010 3
b1010 -
b1010 9
b101010101010101 %
b101010101010101 (
b1010101010101010 $
b1010101010101010 '
1#
#6
0#
#7
0<
b1111 =
0;
00
b1111 1
0/
06
b1111 7
05
b1111111111111111 !
b1111111111111111 ,
b0 "
b0 +
b1111 8
b1111 2
b1111 >
b0 *
0A
b1111111111111111 )
b1111 B
b1111 C
b0 @
b1111 4
b0 .
b1111 :
b1111 ?
b0 3
b1111 -
b0 9
0&
b1111000011110000 %
b1111000011110000 (
b111100001111 $
b111100001111 '
1#
#8
0#
#9
1#
