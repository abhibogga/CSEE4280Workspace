$date
	Fri Feb 14 14:39:13 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_ssd $end
$var wire 8 ! cathode [7:0] $end
$var wire 8 " anode [7:0] $end
$var parameter 32 # CLK_PER $end
$var parameter 32 $ NUM_SEGMENTS $end
$var parameter 32 % REFR_RATE $end
$var reg 1 & Clk $end
$var reg 1 ' Reset $end
$var reg 32 ( encoded [31:0] $end
$var reg 8 ) expected_anode [7:0] $end
$var reg 8 * expected_cathode [7:0] $end
$var reg 1 + goodOrNot $end
$scope module dut $end
$var wire 1 & Clk $end
$var wire 1 ' Reset $end
$var wire 32 , encoded [31:0] $end
$var parameter 32 - CLK_PER $end
$var parameter 32 . INTERVAL $end
$var parameter 32 / NUM_SEGMENTS $end
$var parameter 32 0 REFR_RATE $end
$var reg 8 1 anode [7:0] $end
$var reg 3 2 anode_count [2:0] $end
$var reg 8 3 cathode [7:0] $end
$var reg 14 4 refresh_count [13:0] $end
$scope module ct_0 $end
$var wire 1 & Clk $end
$var wire 4 5 encoded [3:0] $end
$var reg 8 6 cathode [7:0] $end
$upscope $end
$scope module ct_1 $end
$var wire 1 & Clk $end
$var wire 4 7 encoded [3:0] $end
$var reg 8 8 cathode [7:0] $end
$upscope $end
$scope module ct_2 $end
$var wire 1 & Clk $end
$var wire 4 9 encoded [3:0] $end
$var reg 8 : cathode [7:0] $end
$upscope $end
$scope module ct_3 $end
$var wire 1 & Clk $end
$var wire 4 ; encoded [3:0] $end
$var reg 8 < cathode [7:0] $end
$upscope $end
$scope module ct_4 $end
$var wire 1 & Clk $end
$var wire 4 = encoded [3:0] $end
$var reg 8 > cathode [7:0] $end
$upscope $end
$scope module ct_5 $end
$var wire 1 & Clk $end
$var wire 4 ? encoded [3:0] $end
$var reg 8 @ cathode [7:0] $end
$upscope $end
$scope module ct_6 $end
$var wire 1 & Clk $end
$var wire 4 A encoded [3:0] $end
$var reg 8 B cathode [7:0] $end
$upscope $end
$scope module ct_7 $end
$var wire 1 & Clk $end
$var wire 4 C encoded [3:0] $end
$var reg 8 D cathode [7:0] $end
$upscope $end
$upscope $end
$scope task check_outputs $end
$var reg 8 E expected_anode [7:0] $end
$var reg 8 F expected_cathode [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111101000 0
b1000 /
b10011100010000 .
b1010 -
b1111101000 %
b1000 $
b1010 #
$end
#0
$dumpvars
bx F
bx E
bx D
b0 C
bx B
b1 A
bx @
b10 ?
bx >
b11 =
bx <
b100 ;
bx :
b101 9
bx 8
b110 7
bx 6
b111 5
b0 4
bx 3
b0 2
bx 1
b1001000110100010101100111 ,
x+
bx *
bx )
b1001000110100010101100111 (
1'
0&
bx "
bx !
$end
#5000
bx1111000 6
bx0000010 8
bx0010010 :
bx0011001 <
bx0110000 >
bx0100100 @
bx1111001 B
bx1000000 D
b11111110 "
b11111110 1
b0 4
1&
#10000
0&
#15000
bx1111000 !
bx1111000 3
b11111110 "
b11111110 1
b0 4
1&
#20000
0&
b11000000 *
b10111110 )
0'
#25000
b11111110 "
b11111110 1
b1 4
1&
#30000
0&
1+
b11000000 F
b10111110 E
